name: BAGEL-FE-CICD

on:
  push:
    branches:
      - deploy
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 프로젝트 빌드
        run: CI=false npm run build

      - name: Docker 빌드환경 설정
        uses: docker/setup-buildx-action@v3

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bagel-front-container:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 서버 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2022
          script: |
            set -e

            echo "환경변수 설정..."
            export PATH=$PATH:/usr/local/bin
            export PW=${{ secrets.SERVER_PASSWORD }}
            PORT=3006
            CONTAINER_NAME="bagel-front"

            echo "컨테이너 이름: $CONTAINER_NAME"
            echo "포트: $PORT (호스트) -> 3000 (컨테이너)"

            echo "도커 이미지 풀: ${{ secrets.DOCKERHUB_USERNAME }}/bagel-front-container:latest"
            echo $PW | sudo -S docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bagel-front-container:latest

            echo "컨테이너 $CONTAINER_NAME 존재 여부 확인 중..."
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
              echo "컨테이너 $CONTAINER_NAME 이(가) 존재합니다. 중지 및 삭제 중..."
              echo $PW | sudo -S docker rm -f $CONTAINER_NAME
              echo "컨테이너 $CONTAINER_NAME 이(가) 삭제되었습니다."
            else
              echo "존재하는 컨테이너 $CONTAINER_NAME 이(가) 없습니다."
            fi

            echo "새 컨테이너 실행 중..."
            echo $PW | sudo -S docker run -d \
              -p ${PORT}:3000 \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --network bridge \
              ${{ secrets.DOCKERHUB_USERNAME }}/bagel-front-container:latest

            echo "컨테이너 상태 확인 중..."
            sleep 5

            if sudo docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ 컨테이너 $CONTAINER_NAME 이(가) 성공적으로 실행되었습니다."
              echo "컨테이너 상태:"
              echo $PW | sudo -S docker ps | grep $CONTAINER_NAME
            else
              echo "❌ 컨테이너 $CONTAINER_NAME 실행 실패"
              echo "컨테이너 로그:"
              echo $PW | sudo -S docker logs $CONTAINER_NAME --tail 50
              exit 1
            fi

            echo "배포가 완료되었습니다!"
            echo "프론트엔드 URL: http://${{ secrets.SERVER_HOST }}:${PORT}"